---
import { Image } from 'astro:assets';
import Icons from './react/Icons';
import Logo from './Logo.astro';
import ShapeVector from './ShapeVector.astro';

const services = [
  {
    title: 'Digitale Strategie',
    description: 'Van marktinzicht naar productexcellentie',
    link: '/services/digitale-strategie',
    features: ['Strategische planning', 'Roadmapping', 'Product Vision'],
    icon: 'Compass'
  },
  {
    title: 'Websites',
    description: 'Professioneel, uniek en betaalbaar',
    link: '/landing/jouw-website',
    features: ['Modern Design', 'SEO-Optimized', 'Mobile-First'],
    icon: 'Globe'
  },
  {
    title: 'Consulting & advies',
    description: 'Expert advies voor digitale groei',
    link: '/landing/digitaal-advies',
    features: ['Business Analysis', 'Process Optimization', 'Growth Strategy'],
    icon: 'Brain'
  },
  {
    title: 'AI Training',
    description: 'Van idee naar prototype zonder code',
    link: '/landing/ai-training',
    features: ['AI Tools Mastery', 'Prompt Engineering', 'Rapid Prototyping'],
    icon: 'Sparkles'
  }
];
---

<header class="fixed w-full z-50">
  <div class="absolute inset-0 backdrop-blur-md bg-primary/80"></div>

  <nav class="relative container mx-auto px-4 py-4">
    <div class="flex items-center justify-between">
      <Logo />

      <div class="hidden lg:flex items-center gap-8">
        <div class="relative group">
          <button 
            class="flex items-center gap-2 text-gray-300 hover:text-accent transition-colors py-2 relative overflow-hidden group"
            aria-expanded="false"
            aria-controls="mega-menu"
            id="mega-menu-button"
          >
            <span class="relative z-10">Wat ik doe</span>
            <Icons.ChevronDown class="w-4 h-4 transition-transform group-hover:rotate-180 relative z-10" />
          </button>
        </div>

        <a href="/#about" class="text-gray-300 hover:text-accent transition-colors py-2 relative overflow-hidden group">
          <span class="relative z-10">Over mij</span>
        </a>

        <a href="/#contact" class="text-gray-300 hover:text-accent transition-colors py-2 relative overflow-hidden group">
          <span class="relative z-10">Contact</span>
        </a>
      </div>

      <button class="lg:hidden text-gray-300 hover:text-accent transition-colors" id="mobile-menu-button">
        <Icons.Menu class="w-6 h-6" />
      </button>
    </div>

    <!-- Mega Menu -->
    <div id="mega-menu" class="absolute left-1/2 -translate-x-1/2 w-[80vw] mt-2 hidden opacity-0 transition-all duration-300 transform -translate-y-4">
      <div class="relative">
        <div class="absolute inset-0 bg-primary/95 backdrop-blur-lg rounded-2xl shadow-xl"></div>
        <div class="relative grid grid-cols-2 gap-8 p-8">
          {services.map(service => {
            const Icon = Icons[service.icon];
            return (
              <a href={service.link} class="p-6 rounded-xl hover:bg-white/5 transition-all group relative overflow-hidden">
                <div class="absolute inset-0 opacity-0 group-hover:opacity-25 transition-opacity">
                  <ShapeVector />
                </div>
                <div class="relative z-10">
                  <div class="flex items-center gap-3 mb-3">
                    {Icon && <Icon class="w-6 h-6 text-accent" />}
                    <h3 class="text-xl font-semibold text-white group-hover:text-accent transition-colors">{service.title}</h3>
                  </div>
                  <p class="text-gray-400 mb-4">{service.description}</p>
                  <div class="flex flex-wrap gap-2">
                    {service.features.map(feature => (
                      <span class="text-xs px-2 py-1 rounded-full bg-white/10 text-gray-300">{feature}</span>
                    ))}
                  </div>
                </div>
              </a>
            );
          })}
        </div>
      </div>
    </div>
  </nav>

  <!-- Mobile Menu -->
  <div id="mobile-menu" class="fixed inset-0 lg:hidden translate-x-full transition-transform duration-300">
    <div class="absolute inset-0 bg-primary/95 backdrop-blur-lg"></div>

    <div class="relative h-full flex flex-col">
      <div class="container mx-auto px-4 py-4">
        <div class="flex justify-between items-center mb-8">
          <Logo />
          <button id="close-mobile-menu" class="text-gray-300 hover:text-accent transition-colors">
            <Icons.Close class="w-6 h-6" />
          </button>
        </div>

        <nav class="flex-1 flex flex-col justify-center space-y-8">
          <div>
            <button class="flex items-center justify-between w-full text-gray-300 hover:text-accent transition-colors mb-4" id="mobile-services-button">
              <span class="text-2xl">Wat ik doe</span>
              <Icons.ChevronDown class="w-5 h-5 transition-transform rotate-180" />
            </button>

            <div id="mobile-services-panel" class="space-y-6 pl-4">
              {services.map(service => {
                const Icon = Icons[service.icon];
                return (
                  <a href={service.link} class="block text-gray-400 hover:text-accent transition-colors">
                    <div class="flex items-center gap-2 mb-2">
                      {Icon && <Icon class="w-5 h-5 text-accent" />}
                      <h3 class="text-xl text-gray-300 font-medium">{service.title}</h3>
                    </div>
                    
                  </a>
                );
              })}
            </div>
          </div>

          <a href="/#about" class="text-2xl text-gray-300 hover:text-accent transition-colors">Over mij</a>
          <a href="/#contact" class="text-2xl text-gray-300 hover:text-accent transition-colors">Contact</a>
        </nav>
      </div>
    </div>
  </div>
</header>

<script>
  // Desktop Mega Menu
  const megaMenuButton = document.getElementById('mega-menu-button');
  const megaMenu = document.getElementById('mega-menu');
  let isMegaMenuOpen = false;

  function toggleMegaMenu() {
    isMegaMenuOpen = !isMegaMenuOpen;
    if (isMegaMenuOpen) {
      megaMenu?.classList.remove('hidden', 'opacity-0', '-translate-y-4');
      megaMenuButton?.setAttribute('aria-expanded', 'true');
    } else {
      megaMenu?.classList.add('hidden', 'opacity-0', '-translate-y-4');
      megaMenuButton?.setAttribute('aria-expanded', 'false');
    }
  }

  megaMenuButton?.addEventListener('click', (e) => {
    e.stopPropagation();
    toggleMegaMenu();
  });

  // Close mega menu when clicking outside
  document.addEventListener('click', (e) => {
    if (isMegaMenuOpen && !megaMenu?.contains(e.target as Node)) {
      toggleMegaMenu();
    }
  });

  // Mobile Menu
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const closeMobileMenuButton = document.getElementById('close-mobile-menu');
  const mobileMenu = document.getElementById('mobile-menu');
  const mobileServicesButton = document.getElementById('mobile-services-button');
  const mobileServicesPanel = document.getElementById('mobile-services-panel');

  function toggleMobileMenu() {
    mobileMenu?.classList.toggle('translate-x-full');
  }

  mobileMenuButton?.addEventListener('click', () => {
    toggleMobileMenu();
    // Services panel is now visible by default, no need to toggle it
  });
  
  closeMobileMenuButton?.addEventListener('click', toggleMobileMenu);

  mobileServicesButton?.addEventListener('click', () => {
    mobileServicesPanel?.classList.toggle('hidden');
    mobileServicesButton.querySelector('svg')?.classList.toggle('rotate-180');
  });

  // Handle section navigation
  document.querySelectorAll('a[href^="/#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const href = this.getAttribute('href');
      if (!href) return;
      
      const sectionId = href.split('#')[1];
      const currentPath = window.location.pathname;
      
      if (currentPath !== '/') {
        window.location.href = href;
      } else {
        const targetElement = document.getElementById(sectionId);
        if (targetElement) {
          // Close menus
          if (!isMegaMenuOpen) toggleMegaMenu();
          mobileMenu?.classList.add('translate-x-full');
          
          const headerOffset = 100;
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        }
      }
    });
  });
</script>
